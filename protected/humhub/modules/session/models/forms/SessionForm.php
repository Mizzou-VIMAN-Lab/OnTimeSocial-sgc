<?php

namespace humhub\modules\session\models\forms;


use Yii;
use yii\base\Model;
use DateInterval;
use DateTime;
use DateTimeZone;
use humhub\libs\DbDateValidator;
use humhub\libs\TimezoneHelper;
use humhub\modules\calendar\CalendarUtils;
use humhub\modules\calendar\models\CalendarEntryType;
use humhub\modules\calendar\models\DefaultSettings;
use humhub\modules\content\models\Content;
use humhub\modules\calendar\models\CalendarEntry;

class SessionFrom extends Model
{
	public $start_date;
	public $start_time;
	public $end_date;
	public $end_time;
	public $timeZone;
	public $timeZoneItems;
	public $sendUpdateNotification = 0;
	public $entry;

	public function init()
    {
        $this->timeZone = empty($this->timeZone) ? Yii::$app->formatter->timeZone : $this->timeZone;

        if($this->entry) {
            if($this->entry->all_day) {
                $this->timeZone = $this->entry->time_zone;
            }

            // Translate time/date from app (db) timeZone to user (or configured) timeZone
            $this->translateDateTimes($this->entry->start_datetime, $this->entry->end_datetime, Yii::$app->timeZone, $this->timeZone);
            $this->is_public = $this->entry->content->visibility;

            $type = $this->entry->getType();
            if(!empty($type)) {
                $this->type_id = $type->id;
            }


        }
    }

    public function getTimeFormat()
    {
        return Yii::$app->formatter->isShowMeridiem() ? 'h:mm a' : 'php:H:i';
    }

    public function beforeValidate()
    {
        $this->checkAllDay();
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function checkAllDay()
    {
        Yii::$app->formatter->timeZone = $this->timeZone;
        if($this->entry->all_day) {
            $date = new DateTime('now', new DateTimeZone($this->timeZone));
            $date->setTime(0,0);
            $this->start_time = Yii::$app->formatter->asTime($date, $this->getTimeFormat());
            $date->setTime(23,59);
            $this->end_time = Yii::$app->formatter->asTime($date, $this->getTimeFormat());
        }
        Yii::$app->i18n->autosetLocale();
    }

    public function validateEndTime($attribute, $params)
    {
        if (new DateTime($this->start_date) >= new DateTime($this->end_date)) {
            $this->addError($attribute, Yii::t('SessionModule.base', "End time must be after start time!"));
        }
    }

    public function validateType($attribute, $params)
    {
        if(!$this->type_id) {
            return;
        }

        $type = CalendarEntryType::findOne($this->type_id);

        if($type->contentcontainer_id != null && $type->contentcontainer_id !== $this->entry->content->contentcontainer_id) {
            $this->addError($attribute,Yii::t('SessionModule.base', "Invalid event type id selected."));
        }
    }
}